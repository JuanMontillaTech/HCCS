// <auto-generated />
using System;
using HCCS.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HCCS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210725012430_accounting")]
    partial class accounting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HCCS.Aplicaction.DTOs.RefreshTokenDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshTokenDto");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Accounting.AccountingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("TypeAcountingAcountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeAcountingAcountId");

                    b.ToTable("AccountingAccount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountName = "Caja",
                            AccountNumber = "1010",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountName = "Inscripciones",
                            AccountNumber = "4106",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 3,
                            AccountName = "Cuotas Estudiantiles",
                            AccountNumber = "4107",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 4,
                            AccountName = "Ventas",
                            AccountNumber = "4108",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 5,
                            AccountName = "Becas",
                            AccountNumber = "4109",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 6,
                            AccountName = "Aporte por trabajo hermanas",
                            AccountNumber = "4110",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 7,
                            AccountName = "Cafetería",
                            AccountNumber = "4111",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 8,
                            AccountName = "Cambio de divisas",
                            AccountNumber = "4114",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 9,
                            AccountName = "Cobro prestamos",
                            AccountNumber = "4116",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 10,
                            AccountName = "Pre- Matricula",
                            AccountNumber = "4117",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 11,
                            AccountName = "Venta de camiseta",
                            AccountNumber = "4118",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 12,
                            AccountName = "Certificados, sellos y record",
                            AccountNumber = "4119",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 13,
                            AccountName = "Recargo de mora",
                            AccountNumber = "4120",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 14,
                            AccountName = "Intereses bancarios",
                            AccountNumber = "4202",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 15,
                            AccountName = "Donaciones",
                            AccountNumber = "4203",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 16,
                            AccountName = "Subsidios",
                            AccountNumber = "4204",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 17,
                            AccountName = "Comisiones",
                            AccountNumber = "4205",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 18,
                            AccountName = "Otros ingresos",
                            AccountNumber = "4206",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 19,
                            AccountName = "Taller de costura",
                            AccountNumber = "4211",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 4
                        },
                        new
                        {
                            Id = 20,
                            AccountName = "Egresos",
                            AccountNumber = "61",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 21,
                            AccountName = "Templo y culto ",
                            AccountNumber = "6101",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 22,
                            AccountName = "Sueldo personal",
                            AccountNumber = "6102",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 23,
                            AccountName = "Prestaciones laborales",
                            AccountNumber = "6103",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 24,
                            AccountName = "Seguro social",
                            AccountNumber = "6104",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 25,
                            AccountName = "Seguro medico",
                            AccountNumber = "6105",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 26,
                            AccountName = "Capacitación al personal",
                            AccountNumber = "6106",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 27,
                            AccountName = "Cursillos y retiros espirituales",
                            AccountNumber = "6107",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 28,
                            AccountName = "Agua, basura y alcantarillado",
                            AccountNumber = "6108",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 29,
                            AccountName = "Electricidad",
                            AccountNumber = "6109",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 30,
                            AccountName = "Teléfonos y comunicaciones",
                            AccountNumber = "6110",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 31,
                            AccountName = "refrigerios",
                            AccountNumber = "6111",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 32,
                            AccountName = "material didáctico",
                            AccountNumber = "6112",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 33,
                            AccountName = "suscripciones y compra de libros",
                            AccountNumber = "6113",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 34,
                            AccountName = "Utensilios de limpieza",
                            AccountNumber = "6114",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 35,
                            AccountName = "Mantenimiento equipo de transporte",
                            AccountNumber = "6115",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 36,
                            AccountName = "Combustible y lubricantes",
                            AccountNumber = "6116",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 37,
                            AccountName = "Mantenimiento edificio y reparaciones",
                            AccountNumber = "6117",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 38,
                            AccountName = "Viajes nacionales y viáticos",
                            AccountNumber = "6118",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 39,
                            AccountName = "Viajes Extranjero y viáticos",
                            AccountNumber = "6119",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 40,
                            AccountName = "Ayuda a familiares",
                            AccountNumber = "6120",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 41,
                            AccountName = "Otras Ayudas",
                            AccountNumber = "6121",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 42,
                            AccountName = "Regalos y fiestas",
                            AccountNumber = "6122",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 43,
                            AccountName = "Obras de apostolado y fundación",
                            AccountNumber = "6123",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 44,
                            AccountName = "Médicos y medicinas",
                            AccountNumber = "6124",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 45,
                            AccountName = "Mantenimiento de equipos",
                            AccountNumber = "6125",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 46,
                            AccountName = "Mantenimiento de muebles y equipos de oficinas",
                            AccountNumber = "6126",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 47,
                            AccountName = "Gastos financieros",
                            AccountNumber = "6127",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 48,
                            AccountName = "Formación(Noviciado-Postulando-Juniorado)",
                            AccountNumber = "6128",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 49,
                            AccountName = "Material de oficina",
                            AccountNumber = "6129",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 50,
                            AccountName = "Impuestos",
                            AccountNumber = "6130",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 51,
                            AccountName = "Alimentación",
                            AccountNumber = "6131",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 52,
                            AccountName = "Donación y obsequios",
                            AccountNumber = "6132",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 53,
                            AccountName = "Taller de costura",
                            AccountNumber = "6133",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 54,
                            AccountName = "Jardinería y embellecimiento",
                            AccountNumber = "6134",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 55,
                            AccountName = "Inscripciones",
                            AccountNumber = "6135",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 56,
                            AccountName = "Vestidos",
                            AccountNumber = "6136",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 57,
                            AccountName = "Otros gastos (utensilios)",
                            AccountNumber = "6137",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 58,
                            AccountName = "Vacaciones y diversiones",
                            AccountNumber = "6138",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 59,
                            AccountName = "Útiles de aseo personal",
                            AccountNumber = "6139",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 60,
                            AccountName = "Gastos de representación",
                            AccountNumber = "6140",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 61,
                            AccountName = "Gastos de becas",
                            AccountNumber = "6141",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 62,
                            AccountName = "Actividades culturales",
                            AccountNumber = "6142",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 63,
                            AccountName = "Obtención y legalización de documentos",
                            AccountNumber = "6143",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 64,
                            AccountName = "10 % caja general",
                            AccountNumber = "6144",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 65,
                            AccountName = "Tercera parte saldo anual",
                            AccountNumber = "6145",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 66,
                            AccountName = "Seguro retiro hermanas",
                            AccountNumber = "6146",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 67,
                            AccountName = "Casa madre amadora, hermanas mayores",
                            AccountNumber = "6147",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 68,
                            AccountName = "Canonización",
                            AccountNumber = "6148",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 69,
                            AccountName = "Gastos funerales",
                            AccountNumber = "6149",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 70,
                            AccountName = "publicidad y propaganda",
                            AccountNumber = "6150",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 71,
                            AccountName = "Consignaciones bancarias",
                            AccountNumber = "6151",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 72,
                            AccountName = "Sistema de cómputos",
                            AccountNumber = "6152",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 73,
                            AccountName = "Publicidad y propaganda",
                            AccountNumber = "6153",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 74,
                            AccountName = "Alimento de animales",
                            AccountNumber = "6154",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 75,
                            AccountName = "Cambio de divisas",
                            AccountNumber = "6155",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 76,
                            AccountName = "Préstamos",
                            AccountNumber = "6156",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 77,
                            AccountName = "Construcción",
                            AccountNumber = "6157",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 78,
                            AccountName = "Cambio de cheques",
                            AccountNumber = "6159",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 79,
                            AccountName = "Capitulo general",
                            AccountNumber = "6160",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 80,
                            AccountName = "Cuota cóndor y escuelas católicas",
                            AccountNumber = "6162",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 81,
                            AccountName = "Fondos operacionales",
                            AccountNumber = "6163",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 82,
                            AccountName = "Promociones vocacional",
                            AccountNumber = "6169",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 83,
                            AccountName = "Seguro de vehículo",
                            AccountNumber = "6174",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 84,
                            AccountName = "Ayudada a otras comunidades",
                            AccountNumber = "6182",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 85,
                            AccountName = "Asamblea y evaluaciones",
                            AccountNumber = "6185",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 86,
                            AccountName = "Reembolsos",
                            AccountNumber = "6188",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 87,
                            AccountName = "Honorarios profesionales",
                            AccountNumber = "6196",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        },
                        new
                        {
                            Id = 88,
                            AccountName = "Regalía pascual",
                            AccountNumber = "6197",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            ReadOnly = false,
                            TypeAcountingAcountId = 6
                        });
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Accounting.TypeAcountingAcount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Credit")
                        .HasColumnType("bit");

                    b.Property<bool>("Debit")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TypeAcountingAcount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credit = true,
                            Debit = false,
                            Description = "Activo",
                            Enable = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credit = false,
                            Debit = true,
                            Description = "Pasivo",
                            Enable = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credit = false,
                            Debit = true,
                            Description = "Patrimonio o Capital",
                            Enable = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credit = false,
                            Debit = true,
                            Description = "Ingreso",
                            Enable = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credit = true,
                            Debit = false,
                            Description = "Costos",
                            Enable = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credit = true,
                            Debit = false,
                            Description = "Gastos",
                            Enable = false
                        });
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Group");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            Name = "Default",
                            Status = true
                        });
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            GroupId = 1,
                            Name = "Enviar Balances",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            GroupId = 1,
                            Name = "Balances enviados",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Enable = false,
                            GroupId = 1,
                            Name = "Reporte Generar",
                            Status = true
                        });
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.ProfilePermission", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.HasKey("ProfileId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ProfilePermission");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.UsersActiveDirectory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountExpires")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersActiveDirectory");
                });

            modelBuilder.Entity("HCCS.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HCCS.Aplicaction.DTOs.RefreshTokenDto", b =>
                {
                    b.HasOne("HCCS.Infrastructure.Models.ApplicationUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Accounting.AccountingAccount", b =>
                {
                    b.HasOne("HCCS.Domain.Entities.Accounting.TypeAcountingAcount", "TypeAcountingAcount")
                        .WithMany()
                        .HasForeignKey("TypeAcountingAcountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeAcountingAcount");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.Permission", b =>
                {
                    b.HasOne("HCCS.Domain.Entities.Security.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.ProfilePermission", b =>
                {
                    b.HasOne("HCCS.Domain.Entities.Security.Permission", "Permission")
                        .WithMany("Profiles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCCS.Domain.Entities.Security.Profile", "Profile")
                        .WithMany("Permissions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.UserProfile", b =>
                {
                    b.HasOne("HCCS.Domain.Entities.Security.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCCS.Domain.Entities.Security.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HCCS.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HCCS.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCCS.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HCCS.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.Permission", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.Profile", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("HCCS.Domain.Entities.Security.User", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("HCCS.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
